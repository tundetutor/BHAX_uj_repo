<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Schwarzenegger!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
     <!-- 
    <section>
      <title>Szoftmax Py MNIST</title>
        <para>
            Python
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/j7f9SkJR3oc">https://youtu.be/j7f9SkJR3oc</link>      
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/tensorflow/tensorflow/releases/tag/v0.9.0">https://github.com/tensorflow/tensorflow/releases/tag/v0.9.0</link> (/tensorflow-0.9.0/tensorflow/examples/tutorials/mnist/), <link xlink:href="https://progpater.blog.hu/2016/11/13/hello_samu_a_tensorflow-bol">https://progpater.blog.hu/2016/11/13/hello_samu_a_tensorflow-bol</link>  
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            A könyvben már korábban is találkoztunk neurális hálót használó programokkal, viszint ebben a fejezetben picit messzebb megyünk ezekkel.
            Azt ugye már egyszer említettem, hog a neurális hálók 3 alap rétegből épülnek fel, ezek a bemeneti, a műveleti és a kimeneti rétegek. 
            A műveleti réteg pedig szintén több rétegből állhat. Ahhoz, hogy "egyszerűen" belepillanthassunk a neurális hálók világába rendelkezésünkre áll a 
            Tensor Flow. 
        </para>
        <para>
            A gépi tanulás nagy szamítás igényű folyamat ezért a Tensor Flow lehetővé teszi hogy egy 
            feladatot egyszerre több CPU-val és/vagy GPU-val hajtsunk végre, és itt előbukkan a CUDA is ismét. A CUDA párhuzamos számításokat végző technológiája 
            az NVIDIA-nak napjainkban egyre népszerűbbé látszik válni, és ez pontosan a már említett gépi tanulás miatt történik, ehhez ugyanis annyira jól 
            lehet használni a videókártyákat, hogy az NVIDIA elkezdett nemrégiben kifejezetten mesterséges intelligenciához haználatos videókártyákat is forgalmazni, 
            ami a Tesla sorozat, illetve nemrégiben piacra dobtak egy asztali számítógépet is amit kifejezetten gépi tanuláshoz terveztek. Ennek a gépnek fontos 
            megemlíteni, hogy saját NVIDIA operációs rendszere van illetve az NVIDIA fenttart egy saját adatbankot a programok tanításához.
        </para>
        <para>
            A MNIST egy kézzel írt arab számokól álló "adatbank", ez csupán arra szolgál, hogy a programunknak legyen elég bemnti adata amit feldolgozhasson
            tanulás során. A Tensor Flow pedig nyílt forráskódú platform gépi tanuláshoz. Nagyon sok YouTube videót is találtam a témában és sokan egyébként 
            Windows alatt dolgoznak vele. Nekem meggyűlt a bajom a Linux Mintemen ezekkel a Tensor Flow-s programokkal, tehát vagy virtuális gépen Ubuntun 
            fogom őkt futtatni vagy Windowson. 
        </para>
        <para>
            Ahhoz hogy tudjuk futtatni a programunknak, mindenképp kell Python3-nak lennie a gépünkön, illeteve a <command>pip3 install tensorflow</command> 
            parancsal a Tensor Flow-t is telepítenünk kell.
        </para>
        <para>
            A program egyébként úgy dolgozik, hogy először feldolgoz 60.000 képet, amin kézzel írott számjegyek szerepelnek. Ha ezzel elkészült 
            akkor pedig 10.000 teszt képet dolgoz fel és megállapítja róluk, hogy ezeken milyen számjegyek szerepelnek majd kapunk egy számot 
            ami megmondja, hogy átlagosan milyen pontosan tudta megáálapítani milyen számjegyek vannak a képeken.
        </para>

        <programlisting language="python"><![CDATA[
        # Copyright 2015 The TensorFlow Authors. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================

# Norbert Batfai, 27 Nov 2016
# Some modifications and additions to the original code:
# https://github.com/tensorflow/tensorflow/blob/r0.11/tensorflow/examples/tutorials/mnist/mnist_softmax.py
# See also http://progpater.blog.hu/2016/11/13/hello_samu_a_tensorflow-bol
# ==============================================================================

"""A very simple MNIST classifier.

See extensive documentation at
http://tensorflow.org/tutorials/mnist/beginners/index.md
"""
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import argparse

# Import data
from tensorflow.examples.tutorials.mnist import input_data

import tensorflow as tf
old_v = tf.logging.get_verbosity()
tf.logging.set_verbosity(tf.logging.ERROR)

import matplotlib.pyplot


FLAGS = None


#def readimg():
#    file = tf.read_file("sajat8a.png")
#    img = tf.image.decode_png(file)
#    return img

def main(_):
  mnist = input_data.read_data_sets(FLAGS.data_dir, one_hot=True)

  # Create the model
  x = tf.placeholder(tf.float32, [None, 784])
  W = tf.Variable(tf.zeros([784, 10]))
  b = tf.Variable(tf.zeros([10]))
  y = tf.matmul(x, W) + b

  # Define loss and optimizer
  y_ = tf.placeholder(tf.float32, [None, 10])

  # The raw formulation of cross-entropy,
  #
  #   tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(tf.nn.softmax(y)),
  #                                 reduction_indices=[1]))
  #
  # can be numerically unstable.
  #
  # So here we use tf.nn.softmax_cross_entropy_with_logits on the raw
  # outputs of 'y', and then average across the batch.
  cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels = y_, logits = y))
  train_step = tf.train.GradientDescentOptimizer(0.5).minimize(cross_entropy)

  sess = tf.InteractiveSession()
  # Train
  tf.initialize_all_variables().run(session=sess)
  print("- A halozat tanitasa")  
  for i in range(1000):
    batch_xs, batch_ys = mnist.train.next_batch(100)
    sess.run(train_step, feed_dict={x: batch_xs, y_: batch_ys})
    if i % 100 == 0:
      print(i/10, "%")
  print("")

  # Test trained model
  print("- A halozat tesztelese")  
  correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))
  accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))  
  print("- Pontossag: ", sess.run(accuracy, feed_dict={x: mnist.test.images,
                                      y_: mnist.test.labels}))
  print("")
  
  print("- A MNIST 42. tesztkepenek felismerese, mutatom a szamot, a tovabblepeshez csukd be az ablakat")
  
  img = mnist.test.images[42]
  image = img

  matplotlib.pyplot.imshow(image.reshape(28, 28), cmap=matplotlib.pyplot.cm.binary)
  matplotlib.pyplot.savefig("4.png")  
  matplotlib.pyplot.show()

  classification = sess.run(tf.argmax(y, 1), feed_dict={x: [image]})

  print("- Ezt a halozat ennek ismeri fel: ", classification[0])
  print

  #print("-A sajat kezi 8-asom felismerese, mutatom a szamot, a tovabblepeshez csukd be az ablakat")
  print("- A MNIST 11. tesztkepenek felismerese, mutatom a szamot, a tovabblepeshez csukd be az ablakat")
#  img = readimg()
#  image = img.eval()
#  image = image.reshape(28*28)
  img = mnist.test.images[11]
  image = img
  matplotlib.pyplot.imshow(image.reshape(28,28), cmap=matplotlib.pyplot.cm.binary)
  matplotlib.pyplot.savefig("8.png")  
  matplotlib.pyplot.show()

  classification = sess.run(tf.argmax(y, 1), feed_dict={x: [image]})

  print("- Ezt a halozat ennek ismeri fel: ", classification[0])
  print

if __name__ == '__main__':
  parser = argparse.ArgumentParser()
  parser.add_argument('-data_dir', type=str, default='/tmp/tensorflow/mnist/input_data',
                      help='Directory for storing input data')
  FLAGS = parser.parse_args()
  tf.app.run()]]></programlisting> 

    </section>        -->

<!--
    <section>
        <title>Szoftmax R MNIST</title>
        <para>
            R            
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>    
    -->    

    <!--
    <section>
        <title>Mély MNIST</title>
        <para>
            Python            
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>

        <para>
            Ez a program, sokban hasonlít az előzőhöz, mondhatni a "nagytestvére", tehát itt is megtörténik a 60.000 kép feldolgozása, 
            azaz a tanulási fázis, amikor a MNIST-ből kapott inputokkal dolgozik. Ezután viszont láthatjuk az eltérést, ugyanis nem kezdi el
            a MNIST teszt képeiről megállapítani azokon milyen számok szerepelnek hanem egy általunk kiválasztott képen mondja meg, hogy azon 
            milyen számot láthatunk. Mégegy különbség, hogy ebben a programban rejtett rétegből 5-öt találunk.
            A numpy-ra szükségünk lesz a képfeldolgozáshoz, tehát ezt mindeképp telepítsük.
            Amit említettem, hogy nekem Linus Minten ezt még nem sikerült lefuttatni az még mindig áll, tehát, most nem tudok még konkrét 
            feladatmegoldást csatolni. 
        </para>

        <programlisting language="python"><![CDATA[
        import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, Dropout, Flatten, MaxPooling2D

from PIL import Image
import numpy as np
import sys

#tf.compat.v1.enable_eager_execution(
#    config=None, device_policy=None, execution_mode=None
#)

#physical_devices = tf.config.experimental.list_physical_devices('GPU')
#assert len(physical_devices) > 0, "Not enough GPU hardware devices available"
#tf.config.experimental.set_memory_growth(physical_devices[0], True)

(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()

x_train = x_train.reshape(x_train.shape[0], 28, 28, 1)
x_test = x_test.reshape(x_test.shape[0], 28, 28, 1)
x_train = x_train.astype('float32')
x_test = x_test.astype('float32')
x_train /= 255
x_test /= 255

model = Sequential()
model.add(Conv2D(28, kernel_size=(3,3), input_shape=(28, 28, 1)))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Flatten())
model.add(Dense(128, activation=tf.nn.relu))
model.add(Dropout(0.2))
model.add(Dense(10,activation=tf.nn.softmax))

#tb_log_dir = "./cnn_tb"
#file_writer = tf.summary.create_file_writer(tb_log_dir)
#file_writer.set_as_default()
#tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir=tb_log_dir, profile_batch=0)

model.compile(optimizer='adam', 
              loss='sparse_categorical_crossentropy', 
              metrics=['accuracy'])

#model.fit(x=x_train,y=y_train, epochs=10, callbacks=[tensorboard_callback])
model.fit(x=x_train,y=y_train, epochs=10)

model.evaluate(x_test, y_test)

input_image = np.array(Image.open(sys.argv[1]).getdata(0).resize((28, 28), 0))

pred = model.predict(input_image.reshape(1, 28, 28, 1))

print (pred)

print("The number is = ", pred.argmax())]]></programlisting> 

    </section>        

    <section>
        <title>Deep dream</title>
        <para>
            Keras            
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>      
    -->  
                  
    <section>
        <title>Minecraft-MALMÖ</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/bAPSu3Rndi8">https://youtu.be/bAPSu3Rndi8</link>      
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
        <para>
            A könyvben eddig már sok Minecraft Malmö feladattal találkoztunk, a félév során én is már sokat foglalkoztam vele
            szóval már tudok róla írni pár szót. A Malmö Projekt egy nyílt forráskódú Minecraft Mod, amit azért alkottak meg, hogy 
            bevezetésként szolgáljon az ágensprogramozásba illetve a mesterséges intelligencia alapjaiba is betekintést nyerhetünk.
            Ha sikerült leszednünk a Microsoft github repójából, nagyon sok dolgot találunk benne. Fontos megemlíteni, hogy több nyelven is 
            programozhatjuk, ezek közül én a Python-t és C++-t használtam már.              
        </para>
        <para>
            Ha csak kipróbálni szeretnénk, akkor én a Python nyelvet ajánlom, ehhez a prebuldelt verziót elég letöltenünk majd a launcClient.sh 
            állományt futtatva a python kódjainkat egy másik terminálból egyszeerűen elindíthatjuk. Ha viszont mondjuk C++-t is szeretnénk használni én 
            azt javaslom, hogy magunknak build-eljük forrásból ugyanis nekem másképp több hiba jelentkezett illetve több évfolyamtársam is ugyanúgy járt el 
            mint én.
        </para>
        <para>
            Fontos megjegyezni, hogy ha nincs túl erős gépünk, akkor nem biztos, hogy problémák nélkül fog futni a Malmö, tehát ha tudunk választani
            akkor eleve erősebb gépre ajánlom telepítni a biztos futás érdekében. Itt szeretném még azt is megemlíteni, hogy ilyen szempontból kicsit instabil a 
            dolog, többen tapasztaltunk olyat, hogy egy kód a képernyő felvétel során rosszabb teljesítménnyel futott mint amikor nem próbáltuk felvenni, de nem 
            is kell feltétlenül csinálnunk hozzá valami extrát hogy Steve kicsit megmakacsolja magát. Aki ki akarja próbálni ne lepődjön meg rajta, ha ugyanaz a 
            kód ami egyszer hibátlanul lefutott utána más, rosszabb eredményt produkál. 
        </para>
        <para>
            Én egyébként mindenkinek ajánlom, hogy ha tehet és ideje engedi próbálja ki! Szerintem nagyon sok siekrélményt is ad a tanuló programozóknak, ha 
            látják lépésről lépésr, hogyan fut a kódjuk. illetve teljesen más élményt ad mint amikor a lefutott kódunk visszaad egy számot, sokkal "kézzelfoghatóbb"
            az egész.
        </para>
    </section>

    <section>
        <title>Vörös pipacs pokol/ Javíts a 19RF-en!</title>
        <para>
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/WRDt8ljy_hI">Megoldás videó és kódmagyarázat</link>      
        </para>
        <para>
            Ebben a feladatban az előző feladatban tárgyalt kód javítását kellett megoldanunuk azaz, több mint 19 virágot kellett összeszednie 
            Steve-nek ugyanazon a pályán. Nekünk minimális változatásokkal a virágszámot 20-ra sikerült növelnünk. 
        </para>
        <para>
            A legnagyobb módosítás az volt hogy a <function>lvlUp</function> függvényt módosítottuk, hogy <function>jumpmove 1</function>-ek helyett 
            <function>jumpstrafe 1</function>-ekkel ment magassabb szintre. Ennek az volt a lényege hogy a <function>jumpmove 1</function> esetén előfordult, hogy 
            2 szintet ugrott fel amivel egy virágot mindenképp el is vesztettünk. Ez a változtatás szinte önmagában elég volt a plusz 1 virág megszerzéséhez viszont 
            még ami változtatás volt a programot illetően az a <function>time.sleep()</function> értékek változtaása volt. Ha ilyet csinálunk nagyon kell 
            ügyelni rá, hogy ne menjünk túlzásba, akár századmásodpercek is befolyásolhatják az egész program műküdését.
        </para>
        <programlisting language="python">
            <![CDATA[ 
        def lvlUp(self, nbr):
        if self.collectedFlowers[self.y]:
            #self.turnToWall(nbr)
            if nbr[self.left_of_me_idx+9]=="dirt":
                self.agent_host.sendCommand( "jumpstrafe -1" )
                time.sleep(.10)#.2
            elif nbr[self.right_of_me_idx+9]=="dirt":
                self.agent_host.sendCommand( "jumpstrafe 1" )
                time.sleep(.10)#.2
            elif nbr[self.front_of_me_idx+9]=="dirt":
                self.agent_host.sendCommand( "jumpmove 1" )
                time.sleep(.10)#.2
            else:
                self.turnToWall(nbr)                
                self.agent_host.sendCommand( "move 1" )
                time.sleep(.10)#.2
            return True
        else:
            return False
    ]]>
        </programlisting>
    </section>       

</chapter>                
